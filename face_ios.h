// Copied from FACE standard 2.0

#ifndef FACE_IOS_H
#define FACE_IOS_H

#include "globals.h"            // I added this
#include "face_common.h"


typedef char FACE_INTERFACE_NAME_TYPE [30];
typedef char FACE_CONGIGURATION_FILE_NAME [256];
typedef int32_t FACE_MAX_MSG_SIZE_TYPE; /* maximum message length in bytes */
typedef int32_t FACE_MESSAGE_LENGTH_TYPE; /*length of I/O Interface API Message */

typedef enum {
    FACE_MIL_STD_1553,
    FACE_ARINC_429,
    FACE_SERIAL,
    FACE_DISCRETE,
    FACE_ANALOG,
    FACE_GENERIC_BUS //Used for all other busses including Ethernet
} FACE_BUS_TYPE;

typedef enum {
    FACE_GO,
    FACE_NOGO,
    FACE_IDLE,
    FACE_DEGRADED
} FACE_IO_CONNECTION_STATUS_TYPE;

typedef struct {
    FACE_SYSTEM_TIME_TYPE last_message_time;
    _Bool message_available;
    FACE_IO_CONNECTION_STATUS_TYPE connection_status;
} FACE_STATUS_TYPE;

typedef enum {
    FACE_COMMAND,
    FACE_STATUS,
    FACE_DATA,
    FACE_USER_DEFINED
} FACE_MESSAGE_TYPE;

typedef enum {
    FACE_OPEN,
    FACE_REGISTER,
    FACE_READ,
    FACE_WRITE,
    FACE_CLOSE
} FACE_COMMAND_TYPE;

/* For status types, any additions need to be added to the end of the list for backwards compatibility */
typedef enum {
    A429_IO_HW_OPERATIONAL,
    FACE_A429_IO_HW_FIFO_OVERFLOW,
    FACE_A429_IO_SW_CIRCULAR_BUFF_OVERFLOW,
    FACE_A429_IO_HW_ADDRESS_ERROR,
    FACE_A429_IO_HW_SEQUENCE_ERROR,
    FACE_A429_IO_HW_PARITY_ERROR,
    FACE_A429_IO_CLOCK_LOSS,
    FACE_A429_IO_UNKNOWN_ERROR
} FACE_A429_STATUS_TYPE;

typedef enum {
    FACE_M1553_BC_IO_NO_RESPONSE,
    FACE_M1553_BC_IO_LOOP_TEST_FAIL,
    FACE_M1553_BC_IO_MSG_RETRIED,
    FACE_M1553_BC_IO_BAD_DATA_BLOCK,
    FACE_M1553_BC_IO_ADDRESS_ERROR,
    FACE_M1553_BC_IO_WORD_COUNT_ERROR,
    FACE_M1553_BC_IO_SYNC_ERROR,
    FACE_M1553_BC_IO_INVALID_WORD,
    FACE_M1553_RT_IO_TERMINAL_FLAG,
    FACE_M1553_RT_IO_SUBSYSTEM_FLAG,
    FACE_M1553_RT_IO_SERVICE_REQUEST,
    FACE_M1553_RT_IO_BUSY,
    FACE_M1553_RT_IO_DYNAMIC_BC,
    FACE_M1553_RT_IO_NO_RESPONSE,
    FACE_M1553_RT_IO_LOOP_TEST_FAIL,
    FACE_M1553_RT_IO_ILLEGAL_COMMAND_WORD,
    FACE_M1553_RT_IO_WORD_COUNT_ERROR,
    FACE_M1553_RT_IO_SYNC_ERROR,
    FACE_M1553_RT_IO_INVALID_WORD,
    FACE_M1553_RT_IO_RT_RT_GAP_SYNC_ADDR_ERROR,
    FACE_M1553_RT_IO_RT_RT_2ND_CMD_ERROR,
    FACE_M1553_RT_IO_COMMAND_WORD_ERROR,
    FACE_M1553_BM_IO_NO_RESPONSE,
    FACE_M1553_BM_IO_WORD_COUNT_ERROR,
    FACE_M1553_BM_IO_SYNC_ERROR,
    FACE_M1553_BM_IO_INVALID_WORD,
    FACE_M1553_BM_IO_RT_RT_GAP_SYNC_ADDR_ERROR,
    FACE_M1553_BM_IO_RT_RT_2ND_CMD_ERROR,
    FACE_M1553_BM_IO_COMMAND_WORD_ERROR,
    FACE_M1553_BM_IO_BAD_DATA_BLOCK,
    FACE_M1553_BM_IO_MESSAGE_ERROR,
    FACE_M1553_BM_IO_INSTRUMENTATION,
    FACE_M1553_BM_IO_SERVICE_REQUEST,
    FACE_M1553_BM_IO_RESERVED_BITS,
    FACE_M1553_BM_IO_BROADCAST_RCVD,
    FACE_M1553_BM_IO_BUSY,
    FACE_M1553_BM_IO_SF,
    FACE_M1553_BM_IO_DYNAMIC_BC,
    FACE_M1553_BM_IO_TF,
    FACE_M1553_DRIVER_READY,
    FACE_M1553_DRIVER_ERROR,
    FACE_M1553_UNKNOWN_ERROR,
    FACE_M1553_RX_SUCCESS,
    FACE_M1553_TX_SUCCESS,
    FACE_M1553_RXMODE_SUCCESS,
    FACE_M1553_TXMODE_SUCCESS,
    FACE_M1553_RT_TO_RT_SUCCESS,
    FACE_M1553_BC_IO_GO,
    FACE_M1553_BC_IO_NOGO_A,
    FACE_M1553_BC_IO_NOGO_B,
    FACE_M1553_BC_IO_NOGO_T
} FACE_M1553_STATUS_TYPE;

typedef enum {
    FACE_M1553_CMD,
    FACE_M1553_STATUS,
    FACE_M1553_DATA
} FACE_M1553_WORD_TYPE;

typedef enum {
    SERIAL_DEVICE_OPERATIONAL,
    FACE_SERIAL_OVERRUN_ERROR,
    FACE_SERIAL_PARITY_ERROR,
    FACE_SERIAL_FRAMING_ERROR,
    FACE_SERIAL_BREAK_ERROR
} FACE_SERIAL_STATUS_TYPE;

static const int16_t FACE_DISCRETE_ERROR = 1;

static const int16_t FACE_ANALOG_ERROR;

typedef SYSTEM_ADDRESS_TYPE FACE_MESSAGE_ADDR_TYPE;
typedef SYSTEM_ADDRESS_TYPE FACE_INTERFACE_HANDLE_TYPE;

typedef void (*FACE_CALLBACK_ADDRESS_TYPE)
( /*in*/ FACE_MESSAGE_LENGTH_TYPE message_length,
  /*in*/ FACE_MESSAGE_ADDR_TYPE data_buffer_address);

void FACE_IO_Initialize
( /* in */ const FACE_CONGIGURATION_FILE_NAME configuration_file,
  /* out */ FACE_RETURN_CODE_TYPE *return_code);

void FACE_IO_Open
( /* in */ const FACE_INTERFACE_NAME_TYPE name,
  /* out */ FACE_INTERFACE_HANDLE_TYPE *handle,
  /* out */ FACE_RETURN_CODE_TYPE *return_code);

void FACE_IO_Register
( /* in */ FACE_INTERFACE_HANDLE_TYPE handle,
  /* in */ FACE_CALLBACK_ADDRESS_TYPE callback_address,
  /* out */ FACE_RETURN_CODE_TYPE *return_code);

void FACE_IO_Read
( /* in */ FACE_INTERFACE_HANDLE_TYPE handle,
  /* in */ FACE_TIMEOUT_TYPE timeout,
  /* inout */ FACE_MESSAGE_LENGTH_TYPE *message_length,
  /* in */ FACE_MESSAGE_ADDR_TYPE data_buffer_address,
  /* out */ FACE_RETURN_CODE_TYPE *return_code);

void FACE_IO_Write
( /* in */ FACE_INTERFACE_HANDLE_TYPE handle,
  /* in */ FACE_TIMEOUT_TYPE timeout,
  /* in */ FACE_MESSAGE_LENGTH_TYPE message_length,
  /* in */ FACE_MESSAGE_ADDR_TYPE data_buffer_address,
  /* out */ FACE_RETURN_CODE_TYPE *return_code);

void FACE_IO_Get_Status
( /* in */ FACE_INTERFACE_HANDLE_TYPE handle,
  /* out */ FACE_STATUS_TYPE *status,
  /* out */ FACE_RETURN_CODE_TYPE *return_code);

void FACE_IO_Close
( /* in */ FACE_INTERFACE_HANDLE_TYPE handle,
  /* out */ FACE_RETURN_CODE_TYPE *return_code);


#endif
